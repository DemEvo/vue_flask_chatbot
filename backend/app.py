# backend/app.py

import os
import numpy as np
import faiss
from flask import Flask, request, jsonify
from flask_cors import CORS
from dotenv import load_dotenv
from openai import OpenAI
import uuid
import json

# 1. –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# ----------------------------------------------------
load_dotenv()

app = Flask(__name__)
# CORS –Ω–µ–æ–±—Ö–æ–¥–∏–º, —á—Ç–æ–±—ã –≤–∞—à —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –Ω–∞ Vue –º–æ–≥ –æ–±—â–∞—Ç—å—Å—è —Å –±—ç–∫–µ–Ω–¥–æ–º
CORS(app)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–ª–∏–µ–Ω—Ç OpenAI
client = OpenAI(api_key=os.getenv("OPENAI_API_KEY"))

SAVE_PATH = "chat_history"
os.makedirs(SAVE_PATH, exist_ok=True) # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É, –µ—Å–ª–∏ –µ–µ –Ω–µ—Ç

# –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–∞—à–µ–π —Å–∏—Å—Ç–µ–º—ã –ø–∞–º—è—Ç–∏
SHORT_TERM_MEMORY_MAX_MESSAGES = 4  # –•—Ä–∞–Ω–∏–º 2 –≤–æ–ø—Ä–æ—Å–∞ –∏ 2 –æ—Ç–≤–µ—Ç–∞
LONG_TERM_MEMORY_TOP_K = 2  # –°–∫–æ–ª—å–∫–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑–≤–ª–µ–∫–∞—Ç—å –∏–∑ RAG
EMBEDDING_DIMENSION = 1536  # –†–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –¥–ª—è –º–æ–¥–µ–ª–∏ "text-embedding-ada-002"

# "–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö" –≤ –ø–∞–º—è—Ç–∏ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–π —á–∞—Ç–∞.
# –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ —ç—Ç–æ –±—ã–ª–∞ –±—ã Redis –∏–ª–∏ –¥—Ä—É–≥–∞—è –ë–î.
chat_sessions = {}


# 2. –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–∞–º—è—Ç—å—é
# ----------------------------------------------------

def get_embedding(text):
    """–°–æ–∑–¥–∞–µ—Ç –≤–µ–∫—Ç–æ—Ä–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ (embedding) –¥–ª—è —Ç–µ–∫—Å—Ç–∞."""
    response = client.embeddings.create(
        model="text-embedding-ada-002",
        input=text
    )
    return np.array(response.data[0].embedding)


def create_new_session(session_id):
    """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é —á–∞—Ç–∞."""
    print(f"‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {session_id}")
    chat_sessions[session_id] = {
        # –û–ø–µ—Ä–∞—Ç–∏–≤–Ω–∞—è –ø–∞–º—è—Ç—å: —Ö—Ä–∞–Ω–∏—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ {"role": "user/assistant", "content": "..."}
        "short_term_memory": [],
        # –î–æ–ª–≥–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–º—è—Ç—å:
        "vector_store": faiss.IndexFlatL2(EMBEDDING_DIMENSION),  # –í–µ–∫—Ç–æ—Ä–Ω—ã–π –∏–Ω–¥–µ–∫—Å FAISS
        "message_history": {}  # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–µ–∫—Å—Ç–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ –∏—Ö ID –≤ FAISS
    }


def save_session(session_id):
    if session_id in chat_sessions:
        session_data = chat_sessions[session_id]
        session_folder = os.path.join(SAVE_PATH, session_id)
        os.makedirs(session_folder, exist_ok=True)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω–¥–µ–∫—Å FAISS
        faiss.write_index(session_data['vector_store'], os.path.join(session_folder, 'index.faiss'))

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        with open(os.path.join(session_folder, 'history.json'), 'w') as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏-—á–∏—Å–ª–∞ –≤ —Å—Ç—Ä–æ–∫–∏ –¥–ª—è JSON
            history_to_save = {str(k): v for k, v in session_data['message_history'].items()}
            json.dump(history_to_save, f)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
        with open(os.path.join(session_folder, 'short_term.json'), 'w') as f:
            json.dump(session_data['short_term_memory'], f)

        print(f"üíæ –°–µ—Å—Å–∏—è {session_id} —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –Ω–∞ –¥–∏—Å–∫.")


def load_or_create_session(session_id):
    if session_id in chat_sessions:
        return chat_sessions[session_id]

    session_folder = os.path.join(SAVE_PATH, session_id)
    index_path = os.path.join(session_folder, 'index.faiss')
    history_path = os.path.join(session_folder, 'history.json')
    short_term_path = os.path.join(session_folder, 'short_term.json')

    if os.path.exists(index_path):
        # –ï—Å–ª–∏ —Ñ–∞–π–ª—ã —Å—É—â–µ—Å—Ç–≤—É—é—Ç - –∑–∞–≥—Ä—É–∂–∞–µ–º
        print(f"üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ —Å–µ—Å—Å–∏–∏ {session_id} —Å –¥–∏—Å–∫–∞.")
        vector_store = faiss.read_index(index_path)

        with open(history_path, 'r') as f:
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –∫–ª—é—á–∏-—Å—Ç—Ä–æ–∫–∏ –æ–±—Ä–∞—Ç–Ω–æ –≤ —á–∏—Å–ª–∞
            history_from_save = json.load(f)
            message_history = {int(k): v for k, v in history_from_save.items()}

        with open(short_term_path, 'r') as f:
            short_term_memory = json.load(f)

        chat_sessions[session_id] = {
            "short_term_memory": short_term_memory,
            "vector_store": vector_store,
            "message_history": message_history
        }
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç - —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
        print(f"‚ú® –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏: {session_id}")
        chat_sessions[session_id] = {
            "short_term_memory": [],
            "vector_store": faiss.IndexFlatL2(EMBEDDING_DIMENSION),
            "message_history": {}
        }

    return chat_sessions[session_id]


# 3. –û—Å–Ω–æ–≤–Ω–æ–π API-—ç–Ω–¥–ø–æ–∏–Ω—Ç
# ----------------------------------------------------
@app.route('/chat', methods=['POST'])
def chat():
    data = request.json
    user_message = data.get('message')
    session_id = data.get('session_id')

    if not user_message or not session_id:
        return jsonify({"error": "Message and session_id are required"}), 400

    # –ï—Å–ª–∏ —Å–µ—Å—Å–∏–∏ –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é
    if session_id not in chat_sessions:
        create_new_session(session_id)

    session = chat_sessions[session_id]

    # --- –õ–û–ì–ò–ö–ê –ì–ò–ë–†–ò–î–ù–û–ô –ü–ê–ú–Ø–¢–ò ---

    # 1. RAG: –ü–æ–∏—Å–∫ –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏
    long_term_context = []
    if session['vector_store'].ntotal > 0:
        message_embedding = get_embedding(user_message)
        # –ò—â–µ–º K –±–ª–∏–∂–∞–π—à–∏—Ö –≤–µ–∫—Ç–æ—Ä–æ–≤ –≤ FAISS
        distances, indices = session['vector_store'].search(np.array([message_embedding]), LONG_TERM_MEMORY_TOP_K)

        # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç—ã –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        for idx in indices[0]:
            if idx in session['message_history']:  # –£–±–µ–¥–∏–º—Å—è, —á—Ç–æ –∏–Ω–¥–µ–∫—Å –≤–∞–ª–∏–¥–µ–Ω
                long_term_context.append(session['message_history'][idx])

    rag_context_str = "\n".join([f"- {msg['content']}" for msg in long_term_context])

    # 2. –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø—Ä–æ–º–ø—Ç –¥–ª—è –º–æ–¥–µ–ª–∏
    messages_for_prompt = []

    # –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç, –æ–±—ä—è—Å–Ω—è—é—â–∏–π –º–æ–¥–µ–ª–∏, –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç
    system_prompt = f"""–¢—ã - –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –£ —Ç–µ–±—è –µ—Å—Ç—å –¥–≤–∞ —Ç–∏–ø–∞ –ø–∞–º—è—Ç–∏ –¥–ª—è –æ—Ç–≤–µ—Ç–∞ –Ω–∞ –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.

1.  **–ö–æ–Ω—Ç–µ–∫—Å—Ç –∏–∑ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏ (–Ω–∞–∏–±–æ–ª–µ–µ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ –ø—Ä–æ—à–ª—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è):**
    {rag_context_str if rag_context_str else "–ü–æ–∫–∞ –Ω–µ—Ç —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ–π –ø–∞–º—è—Ç–∏."}

2.  **–ö—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–∏–∞–ª–æ–≥–∞):**
    –ù–∏–∂–µ –±—É–¥–µ—Ç –∏—Å—Ç–æ—Ä–∏—è –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π.

–û—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –û–ë–û–ò–• —Ç–∏–ø–∞—Ö –ø–∞–º—è—Ç–∏, –¥–∞–π –Ω–∞–∏–ª—É—á—à–∏–π –æ—Ç–≤–µ—Ç –Ω–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≤–æ–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
"""
    messages_for_prompt.append({"role": "system", "content": system_prompt})

    # –î–æ–±–∞–≤–ª—è–µ–º –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
    messages_for_prompt.extend(session['short_term_memory'])

    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    messages_for_prompt.append({"role": "user", "content": user_message})

    # 3. –í—ã–∑–æ–≤ –º–æ–¥–µ–ª–∏ OpenAI
    response = client.chat.completions.create(
        model="gpt-5",
        messages=messages_for_prompt
    )
    bot_message = response.choices[0].message.content

    # 4. –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º –ø–∞–º—è—Ç–∏
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–∏–π –≤–æ–ø—Ä–æ—Å –∏ –æ—Ç–≤–µ—Ç –≤ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω—É—é –ø–∞–º—è—Ç—å
    session['short_term_memory'].append({"role": "user", "content": user_message})
    session['short_term_memory'].append({"role": "assistant", "content": bot_message})

    # –ï—Å–ª–∏ –∫—Ä–∞—Ç–∫–æ—Å—Ä–æ—á–Ω–∞—è –ø–∞–º—è—Ç—å –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞, —Å—Ç–∞—Ä–µ–π—à–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É—Ö–æ–¥—è—Ç –≤ –¥–æ–ª–≥–æ—Å—Ä–æ—á–Ω—É—é
    while len(session['short_term_memory']) > SHORT_TERM_MEMORY_MAX_MESSAGES:
        message_to_archive = session['short_term_memory'].pop(0)  # –ë–µ—Ä–µ–º —Å–∞–º–æ–µ —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ

        # –î–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ –≤ RAG
        message_embedding = get_embedding(message_to_archive['content'])
        current_index = session['vector_store'].ntotal
        session['vector_store'].add(np.array([message_embedding]))
        session['message_history'][current_index] = message_to_archive
        print(f"üìù –ê—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–Ω–æ –≤ RAG: '{message_to_archive['content'][:30]}...'")

    return jsonify({"reply": bot_message})


if __name__ == '__main__':
    app.run(debug=True, port=5000)